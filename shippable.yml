language: none

runtime:
  - nodePool: dynamic__x86_64__Ubuntu_14_04__c4_large
    build:
      pre_ci:
        - echo "pre-ci from runtimeBuild section"
        - preCi=buildPreCi
        - echo preCi=$preCi
        - docker build -t=$IMAGE_NAME:$IMAGE_TAG .
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      pre_ci_boot:
        image_name: drydock/u14
        image_tag: v7.1.4
        env: envInPreCiBootBuild=bar
        pull: $IMAGE_PULL
        options: '--privileged=true --net=bridge -e FOO=true -e BOO=false'
    
      ci:
        - python -V
        - echo "ci from runtimeBuild section"
        - docker ps
        - docker images
        - node --version
        - javac -version
        - source /usr/local/rvm/scripts/rvm
        - ruby --version
        - gcloud version
        - aws --version
        - packer --version
        - jq --version
        - kubectl version --client
        - docker --version
        - docker pull shippabledocker/sample_node_pvt:ecr
        - echo "env1=$env1"
        - echo "preCi=$preCi"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi  
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        - if [ "$SHIPPABLE_PYTHON_VERSION" == "pypy3" ]; then testfail; fi
        - EXPECTED_DOCKER_VERSION="18.03.1-ce"
        - |
          [ $(docker version --format {{.Server.Version}}) == "$EXPECTED_DOCKER_VERSION" ]
    
      post_ci:
        - echo "post-ci from runtimeBuild section"
        - docker push $IMAGE_NAME:$IMAGE_TAG
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      on_success:
        - echo "on-success from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      on_failure:
        - echo "on-failure from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
      
      always:
        - echo "always from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
     
      push:
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi 
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        
  - nodePool: default_node_pool
    build:
      pre_ci:
        - echo "pre-ci from runtimeBuildsection"
        - preCi=buildPreCi
        - echo preCi=$preCi
        - docker build -t=$IMAGE_NAME:$IMAGE_TAG .
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      pre_ci_boot:
        image_name: drydock/u16
        image_tag: master
        env: envInPreCiBootBuild=bar
        pull: $IMAGE_PULL
        options: '--privileged=true --net=bridge -e FOO=true -e BOO=false'
    
      ci:
        - python -V
        - echo "CI from runtimeBuild section"
        - docker ps
        - docker images
        - node --version
        - javac -version
        - source /usr/local/rvm/scripts/rvm
        - ruby --version        
        - aws --version #1.16.81
        - eb --version #3.14.8
        - gcloud version #228.0.0
        - jfrog --version #1.20.1
        - kubectl version --client #1.13.1
        - packer --version #1.3.3
        - ansible --version #2.7.5
        - terraform --version #0.11.11
        - apt search azure-cli
        - az --version #2.0.54
        - jq --version
        - docker --version
        - docker pull shippabledocker/sample_node_pvt:ecr
        - echo "env1=$env1"
        - echo "preCi=$preCi"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi  
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        - if [ "$SHIPPABLE_PYTHON_VERSION" == "pypy3" ]; then testfail; fi
        - EXPECTED_DOCKER_VERSION="18.03.1-ce"
        - |
          [ $(docker version --format {{.Server.Version}}) == "$EXPECTED_DOCKER_VERSION" ]

      post_ci:
        - echo "post-ci from runtimeBuild section"
        - docker push $IMAGE_NAME:$IMAGE_TAG
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      on_success:
        - echo "on-success from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      on_failure:
        - echo "on-failure from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      always:
        - echo "always from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
     
      push:
        - echo "push from runtimeBuild section" 
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        
  - nodePool: dynamic__x86_64__CentOS_7__c4_large
    build:
      pre_ci:
        - echo "pre-ci from runtimeBuildsection"
        - preCi=buildPreCi
        - echo preCi=$preCi
        - docker build -t=$IMAGE_NAME:$IMAGE_TAG .
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      pre_ci_boot:
        image_name: drydock/c7
        image_tag: v7.1.4
        env: envInPreCiBootBuild=bar
        pull: $IMAGE_PULL
        options: '--privileged=true --net=bridge -e FOO=true -e BOO=false'
        
      ci:
        - python -V
        - echo "ci from runtimeBuild section"
        - docker ps
        - docker images
        - node --version
        - javac -version
        - source /usr/local/rvm/scripts/rvm
        - ruby --version
        - gcloud version
        - aws --version
        - packer.io --version
        - jq --version
        - kubectl version --client
        - docker --version
        - docker pull shippabledocker/sample_node_pvt:ecr
        - echo "env1=$env1"
        - echo "preCi=$preCi"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi 
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        - if [ "$SHIPPABLE_PYTHON_VERSION" == "pypy3" ]; then testfail; fi
        - EXPECTED_DOCKER_VERSION="18.03.1-ce"
        - |
          [ $(docker version --format {{.Server.Version}}) == "$EXPECTED_DOCKER_VERSION" ]
      
      post_ci:
        - echo "post-ci from runtimeBuild section"
        - docker push $IMAGE_NAME:$IMAGE_TAG
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
        
      on_success:
        - echo "on-success from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      on_failure:
        - echo "on-failure from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
      always:
        - echo "always from runtimeBuild section"
        - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
        - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
 
env:
  global:
  #Testing for user defined envs and secure envs
    - TEST1=EnvFoo
    - env1=valueFromEnvGlobal
    - IMAGE_NAME=shippabledocker/sample_node_pvt
    - IMAGE_TAG=latest.40
    - IMAGE_PULL=true     
  
  matrix:
    - M1=ONE
  
build:
  pre_ci: #commenting them since i cant override these section in restricted node pool
    - echo "pre-ci section"
    - docker build -t=$IMAGE_NAME:$IMAGE_TAG .
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
  pre_ci_boot:  #commenting them since i cant override these section in restricted node pool
    image_name: drydock/u16all
    image_tag: v7.1.4
    env: envInPreCiBoot=bar
    pull: $IMAGE_PULL
    options: '--privileged=true --net=bridge -e FOO=true -e BOO=false'
    
  ci:
    - python -V
    - docker ps
    - docker images
    - node --version
    - javac -version
    - source /usr/local/rvm/scripts/rvm
    - ruby --version
    - gcloud version
    - aws --version
    - packer --version
    - jq --version
    - kubectl version --client
    - docker --version
    - docker pull shippabledocker/sample_node_pvt:ecr
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    - if [ "$SHIPPABLE_PYTHON_VERSION" == "pypy3" ]; then testfail; fi
    - EXPECTED_DOCKER_VERSION="18.03.1-ce"
    - |
          [ $(docker version --format {{.Server.Version}}) == "$EXPECTED_DOCKER_VERSION" ]
    
  post_ci:  #commenting them since i cant override these section in restricted node pool
    - echo "post-ci section"
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
  on_success:
    - echo "on-success section"
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
  on_failure:
    - echo "on-failure section"
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
  cache: true
  cache_dir_list:
    - $SHIPPABLE_BUILD_DIR/shippable.yml
   
  push:  #commenting them since i cant override these section in restricted node pool
    - if [ $TEST1 == "EnvFoo" ]; then echo 'success'; else testfail; fi
    - if [ $M1 == "ONE" ]; then echo 'success'; else testfail; fi 
    
integrations:
  hub:

 #Docker integration
    - integrationName: ship-docker
      type: dockerRegistryLogin
